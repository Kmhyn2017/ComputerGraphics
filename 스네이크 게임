//글로벌 변수 초기화
var s;
var scl = 20;
var food; // 먹이의 벡터(x,y)저장 변수
playfield = 600; //필드 가로 폭

// p5js Setup function - required

function setup() {
  createCanvas(playfield, 640);
  background(51);
  s = new Snake(); //뱀 객체 생성
  frameRate (10);
  pickLocation();
}

// p5js Draw function - required

function draw() {
  background(51);
  scoreboard();
  if (s.eat(food)) { //뱀이 먹이를 먹엇다면 먹이 생성
    pickLocation();
  }
  s.death(); //뱀 죽음 확인
  s.update(); // 뱀 위치 업데이트
  s.show(); // 뱀 출력 

  fill (255,0,100);
  rect(food.x,food.y, scl, scl);
}

// 먹이 표시 위치 선택
function pickLocation() {
  var cols = floor(playfield/scl); //30값보다 작거나 같은 수들 중, 가장 가까운 정수(int)값을 계산합니다.
  var rows = floor(playfield/scl); //30
  food = createVector(floor(random(cols)), floor(random(rows)));
  food.mult(scl); //food 벡터에 scl만큼 x, y각각 곱하기

  // 뱀이랑 먹이랑 겹치는 지 확인
  for (var i = 0; i < s.tail.length; i++) {
    var pos = s.tail[i];
    var d = dist(food.x, food.y, pos.x, pos.y);
    if (d < 1) { //겹치면 다시생생
      pickLocation();
    }
  }
}

// 스코어보드

function scoreboard() {
  fill(0);
  rect(0, 600, 600, 40);
  fill(255);
  textFont("Georgia");
  textSize(18);
  text("Score: ", 10, 625);
  text("Highscore: ", 450, 625)
  text(s.score, 70, 625);
  text(s.highscore, 540, 625)
}

// 키 조작

function keyPressed() {
  if (keyCode === UP_ARROW){
      s.dir(0, -1);
  }else if (keyCode === DOWN_ARROW) {
      s.dir(0, 1);
  }else if (keyCode === RIGHT_ARROW) {
      s.dir (1, 0);
  }else if (keyCode === LEFT_ARROW) {
      s.dir (-1, 0);
  }
}

// 뱀 오브젝트

function Snake() {
  this.x =0;
  this.y =0;
  this.xspeed = 1;
  this.yspeed = 0;
  this.total = 0;
  this.tail = []; //배열의 [0]이 꼬리의 끝. [length-1]이 꼬리의 처음
  this.score = 1;
  this.highscore = 1;

  this.dir = function(x,y) {
    this.xspeed = x;
    this.yspeed = y;
  }

  this.eat = function(pos) {
    var d = dist(this.x, this.y, pos.x, pos.y);
    if (d < 1) { // 뱀이 먹이를 먹엇으면 점수와 꼬리 +1
      this.total++;
      this.score++;
      text(this.score, 70, 625);
      if (this.score > this.highscore) { //점수가 최고점수보다 높으면 최고점수 업데이트
        this.highscore = this.score;
      }
      text(this.highscore, 540, 625);
      return true; //먹엇으면 true
    } else {
      return false; // 안먹엇으면 false
    }
  }

  this.death = function() { //뱀이 죽었는지 확인
    for (var i = 0; i < this.tail.length; i++) {
      var pos = this.tail[i];
      var d = dist(this.x, this.y, pos.x, pos.y);
      if (d < 1) { //머리가 꼬리  벽에 닿앗을시 점수와 꼬리 초기화
        this.total = 0;
        this.score = 0; // 초기엔 1인데 죽으면 0으로 세팅해둠
        this.tail = [];
      }
    }
  }

  this.update = function(){ //뱀이동 업데이트
    if (this.total === this.tail.length) { // 뱀의 길이와 꼬리 길이가 같을 시 배열 인덱스(백터)를 왼쪽으로 한칸식 이동
      for (var i = 0; i < this.tail.length-1; i++) {
        this.tail[i] = this.tail[i+1];
    }

    }
     // 머리와 가장 가까운 꼬리 업데이트
    this.tail[this.total-1] = createVector(this.x, this.y);
    // 이동한 만큼 머리 이동
    this.x = this.x + this.xspeed*scl;
    this.y = this.y + this.yspeed*scl;

    this.x = constrain(this.x, 0, playfield-scl);
    this.y = constrain(this.y, 0, playfield-scl);


  }
  this.show = function(){ // 뱀 출력
    fill(255);
    for (var i = 0; i < this.tail.length; i++) {
        rect(this.tail[i].x, this.tail[i].y, scl, scl);
    }

    rect(this.x, this.y, scl, scl);
  }
}
